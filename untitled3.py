# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C7go9EXTJ30YnkWTTgnP2Y4ve9mYa_x5
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error

# Настройки страницы
st.set_page_config(page_title="Прогнозирование", layout="wide")
st.title("📈 Сравнение моделей прогнозирования")

# === ЗАГРУЗКА ДАННЫХ ===
@st.cache_data
def load_data():
    data = {
        'Prophet': pd.read_csv("forecast_prophet.csv"),
        'RNN': pd.read_csv("forecast_rnn.csv"),
        'FNN': pd.read_csv("forecast_fnn.csv"),
        'FCNN': pd.read_csv("forecast_fcnn.csv"),
        'XGBoost': pd.read_csv("forecast_xgb.csv"),
        'Ансамбль': pd.read_csv("forecast_ensemble.csv")
    }
    for key in data:
        data[key]['ds'] = pd.to_datetime(data[key]['ds'])
    return data

all_data = load_data()

# === ВЫБОР МОДЕЛИ ===
method = st.radio("Выберите метод прогнозирования:", list(all_data.keys()))

df = all_data[method]

# === ВЫБОР ДИАПАЗОНА ДАТ ===
start_date = df['ds'].min()
end_date = df['ds'].max()
date_range = st.date_input("Выберите диапазон дат:", [start_date, end_date])

if len(date_range) != 2:
    st.warning("Выберите начальную и конечную дату.")
    st.stop()

start, end = pd.to_datetime(date_range[0]), pd.to_datetime(date_range[1])
df_plot = df[(df['ds'] >= start) & (df['ds'] <= end)].copy()

# === ВЫБОР КОЛОНОК ДЛЯ ПРОГНОЗА И ИСТИННЫХ ЗНАЧЕНИЙ ===
if method == 'Prophet':
    y_true = df_plot['y']
    y_pred = df_plot['yhat']
elif method == 'RNN':
    y_true = df_plot['y_true_rnn']
    y_pred = df_plot['y_pred_rnn']
else:
    y_true = df_plot['y_true_rnn']
    y_pred = df_plot['y_pred_rnn']  # Важно: y_pred_rnn в других моделях

# === МЕТРИКИ ===
mape = mean_absolute_percentage_error(y_true, y_pred) * 100
rmse = np.sqrt(mean_squared_error(y_true, y_pred))

st.subheader("📊 Метрики")
col1, col2 = st.columns(2)
col1.metric("MAPE (%)", f"{mape:.2f}")
col2.metric("RMSE", f"{rmse:.2f}")

# === ГРАФИК ===
st.subheader("📉 График прогноза")
fig, ax = plt.subplots(figsize=(12, 5))

# Фактические значения
ax.plot(df_plot['ds'], y_true, label='Фактические значения', color='black')

# Прогноз
if method == 'Prophet':
    ax.plot(df_plot['ds'], y_pred, label='Прогноз Prophet', color='blue')
    if 'yhat_lower' in df_plot and 'yhat_upper' in df_plot:
        ax.fill_between(df_plot['ds'], df_plot['yhat_lower'], df_plot['yhat_upper'],
                        color='blue', alpha=0.2, label='95% интервал')
else:
    ax.plot(df_plot['ds'], y_pred, label=f'Прогноз {method}', linestyle='--', color='green')

ax.set_xlabel("Дата")
ax.set_ylabel("Значение")
ax.legend()
ax.grid(True)
st.pyplot(fig)

# === Таблица данных ===
with st.expander("📋 Показать таблицу данных"):
    st.dataframe(df_plot)