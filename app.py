# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S1u8VOu-6zbU9vppAzZO3Y5pB5uWEZlO
"""

import streamlit as st
import openai
import pandas as pd
import json
import os

# üîê –í—Å—Ç–∞–≤—å —Å–≤–æ–π API-–∫–ª—é—á OpenAI
openai.api_key = "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"

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
@st.cache_data
def load_kb():
    return pd.read_csv("knowledge_base.csv")

# üîé –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
def find_in_kb(query, kb):
    for _, row in kb.iterrows():
        if row["–∑–∞–ø—Ä–æ—Å"].lower() in query.lower():
            return f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ:\n\n**{row['—Ä–µ—à–µ–Ω–∏–µ']}**\n\nüîó [–°—Å—ã–ª–∫–∞]({row['—Å—Å—ã–ª–∫–∞']})"
    return None

# üìñ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ prompt-–∞
def get_system_prompt():
    with open("system_prompt.txt", encoding="utf-8") as f:
        return f.read()

# üìã –õ–æ–≥ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
def log_unrecognized(query):
    os.makedirs("logs", exist_ok=True)
    log_path = "logs/unrecognized.json"
    if os.path.exists(log_path):
        with open(log_path, encoding="utf-8") as f:
            logs = json.load(f)
    else:
        logs = []

    logs.append({"–∑–∞–ø—Ä–æ—Å": query})
    with open(log_path, "w", encoding="utf-8") as f:
        json.dump(logs, f, ensure_ascii=False, indent=2)

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ GPT
def ask_gpt(query):
    system_prompt = get_system_prompt()
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": query}
    ]

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=messages,
        temperature=0.3,
        max_tokens=600
    )
    return response.choices[0].message.content

# üñ• –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="–ì–°–ü –¶–µ–Ω—Ç—Ä ‚Äî –ü–æ–º–æ—â–Ω–∏–∫", page_icon="üí¨")
st.title("üí¨ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ì–°–ü –¶–µ–Ω—Ç—Ä–∞")

query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å") and query.strip():
    kb = load_kb()
    result = find_in_kb(query, kb)

    if result:
        st.success(result)
    else:
        answer = ask_gpt(query)
        st.info(answer)

        if "–Ω–µ –º–æ–≥—É" in answer.lower() or "–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ" in answer.lower():
            log_unrecognized(query)
            st.warning("–ó–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")